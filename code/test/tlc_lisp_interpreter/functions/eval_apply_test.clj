(ns tlc-lisp-interpreter.functions.eval_apply_test
  (:require [clojure.test :refer [deftest is testing]]
            [tlc-lisp-interpreter.functions.eval_apply :as ea]))

(deftest evaluar-de-test
  (testing "Prueba de la funcion: evaluar-de"
    (is (= '(f (x 1 f (lambda (x)))) (ea/evaluar-de '(de f (x)) '(x 1) nil)))
    (is (= '(f (x 1 f (lambda (x) 2))) (ea/evaluar-de '(de f (x) 2) '(x 1) nil)))
    (is (= '(f (x 1 f (lambda (x) (+ x 1)))) (ea/evaluar-de '(de f (x) (+ x 1)) '(x 1) nil)))
    (is (= '(f (x 1 f (lambda (x) (prin3 x) (terpri) y))) (ea/evaluar-de '(de f (x) (prin3 x) (terpri) y) '(x 1) nil)))
    (is (= '((*error* list expected nil) (x 1)) (ea/evaluar-de '(de) '(x 1) nil)))
    (is (= '((*error* list expected nil) (x 1)) (ea/evaluar-de '(de f) '(x 1) nil)))
    (is (= '((*error* list expected 2) (x 1)) (ea/evaluar-de '(de f 2) '(x 1) nil)))
    (is (= '((*error* list expected 2) (x 1)) (ea/evaluar-de '(de f 2 3) '(x 1) nil)))
    (is (= '((*error* list expected nil) (x 1)) (ea/evaluar-de '(de (f)) '(x 1) nil)))
    (is (= '((*error* list expected x) (x 1)) (ea/evaluar-de '(de 2 x) '(x 1) nil)))
    (is (= '((*error* symbol expected 2) (x 1)) (ea/evaluar-de '(de 2 (x)) '(x 1) nil)))
    (is (= '((*error* cannot-set nil) (x 1)) (ea/evaluar-de '(de nil (x) 2) '(x 1) nil)))))

(deftest evaluar-escalar-test
  (testing "Prueba de la funcion: evaluar-escalar"
    (is (= '(32 (v 1 w 3 x 6)) (ea/evaluar-escalar 32 '(v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '("chau" (v 1 w 3 x 6)) (ea/evaluar-escalar "chau" '(v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '("hola" (v 1 w 3 x 6)) (ea/evaluar-escalar 'z '(v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '("hola" (v 1 w 3 x 6)) (ea/evaluar-escalar 'Z '(v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(3 (v 1 w 3 x 6)) (ea/evaluar-escalar 'w '(v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(5 (v 1 w 3 x 6)) (ea/evaluar-escalar 'x '(v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '((*error* unbound-symbol n) (v 1 w 3 x 6)) (ea/evaluar-escalar 'n '(v 1 w 3 x 6) '(x 5 y 11 z "hola"))))))


(deftest evaluar-setq-test
  (testing "Prueba de la funcion: evaluar-setq"
    (is (= '((*error* list expected nil) (nil nil t t + add w 5 x 4))
           (ea/evaluar-setq '(setq) '(nil nil t t + add w 5 x 4) '(x 1 y nil z 3))))
    (is (= '((*error* list expected nil) (nil nil t t + add w 5 x 4))
           (ea/evaluar-setq '(setq m) '(nil nil t t + add w 5 x 4) '(x 1 y nil z 3))))
    (is (= '((*error* list expected nil) (nil nil t t + add w 5 x 4))
           (ea/evaluar-setq '(setq nil) '(nil nil t t + add w 5 x 4) '(x 1 y nil z 3))))
    (is (= '((*error* cannot-set nil) (nil nil t t + add w 5 x 4))
           (ea/evaluar-setq '(setq nil 7) '(nil nil t t + add w 5 x 4) '(x 1 y nil z 3))))
    (is (= '((*error* symbol expected 7) (nil nil t t + add w 5 x 4))
           (ea/evaluar-setq '(setq 7 8) '(nil nil t t + add w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(7 (nil nil t t + add w 5 x 4 m 7))
           (ea/evaluar-setq '(setq m 7) '(nil nil t t + add w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(2 (nil nil t t + add w 5 x 2))
           (ea/evaluar-setq '(setq x (+ x 1)) '(nil nil t t + add w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(7 (nil nil t t + add w 5 x 7))
           (ea/evaluar-setq '(setq x 7) '(nil nil t t + add w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(8 (nil nil t t + add w 5 x 7 m 8))
           (ea/evaluar-setq '(setq x 7 m (+ x 7)) '(nil nil t t + add w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(14 (nil nil t t + add w 5 x 7 m 14))
           (ea/evaluar-setq '(setq x 7 m (+ x 7)) '(nil nil t t + add w 5 x 4) '(y nil z 3))))
    (is (= '((*error* list expected nil) (nil nil t t + add w 5 x 7))
           (ea/evaluar-setq '(setq x 7 y) '(nil nil t t + add w 5 x 4) '(y nil z 3))))
    (is (= '(9 (nil nil t t + add w 5 x 7 y 8 z 9))
           (ea/evaluar-setq '(setq x 7 y 8 z 9) '(nil nil t t + add w 5 x 4) '(y nil z 3))))))

(deftest evaluar-or-test
  (testing "Prueba de la funcion: evaluar-or"
    (is (= '(nil (nil nil t t w 5 x 4))
           (ea/evaluar-or '(or) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(nil (nil nil t t w 5 x 4))
           (ea/evaluar-or '(or nil) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(t (nil nil t t w 5 x 4))
           (ea/evaluar-or '(or t) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(5 (nil nil t t w 5 x 4))
           (ea/evaluar-or '(or w) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))
    (is (= '((*error* unbound-symbol r) (nil nil t t w 5 x 4))
           (ea/evaluar-or '(or r) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(nil (nil nil t t w 5 x 4))
           (ea/evaluar-or '(or y) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(6 (nil nil t t w 5 x 4))
           (ea/evaluar-or '(or 6) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(6 (nil nil t t w 5 x 4))
           (ea/evaluar-or '(or nil 6) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(8 (nil nil t t w 5 x 4 b 8))
           (ea/evaluar-or '(or (setq b 8) nil) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(6 (nil nil t t w 5 x 4))
           (ea/evaluar-or '(or nil 6 nil) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(6 (nil nil t t w 5 x 4))
           (ea/evaluar-or '(or nil 6 r nil) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(t (nil nil t t w 5 x 4))
           (ea/evaluar-or '(or nil t r nil) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))
    (is (= '(nil (nil nil t t w 5 x 4))
           (ea/evaluar-or '(or nil nil nil nil) '(nil nil t t w 5 x 4) '(x 1 y nil z 3))))))

(deftest evaluar-if-test
  (testing "Prueba de la funcion: evaluar-if"
    (is (= '(nil (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if t) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(nil (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if 7) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(nil (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if nil) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(nil (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if x) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(9 (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if t 9) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(9 (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if z 9) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(9 (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if w 9) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '((*error* unbound-symbol r) (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if r 9) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(nil (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if nil 9) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '("hola" (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if nil 9 z) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '("hola" (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if nil 9 1 2 3 z) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(3 (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if nil 9 w) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(8 (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if nil 9 8) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(8 (nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if nil a 8) '(nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '((*error* unbound-symbol a) (gt gt nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if (gt 2 0) a 8) '(gt gt nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(8 (gt gt nil nil t t v 1 w 3 x 6))
           (ea/evaluar-if '(if (gt 0 2) a 8) '(gt gt nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))
    (is (= '(8 (gt gt nil nil t t v 1 w 3 x 6 m 8))
           (ea/evaluar-if '(if (gt 0 2) a (setq m 8)) '(gt gt nil nil t t v 1 w 3 x 6) '(x 5 y 11 z "hola"))))))